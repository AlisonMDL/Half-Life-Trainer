unit Unit1;

{$mode objfpc}{$H+}

interface


{
///////////////////////NOTIZEN///////////////////////
-------
       hl.dll+6D393 - 4A                    - dec edx //DEC 357 AMMO
       hl.dll+3A576 - 48                    - dec eax //DEC Pistol AMMO
       hl.dll+4B7F0 - 4A                    - dec edx //DEC SMG AMMO
       hl.dll+76027 - 4A                    - dec edx //DEC Shotgun AMMO
       hl.dll+1DEFA - 48                    - dec eax //DEC Crossbow AMMO
       hl.dll+6F51A - 49                    - dec ecx //DEC Rocket AMMO
       hl.dll+25D7A - 2B C2                 - sub eax,edx //DEC Egon
       hl.dll+3BC93 - 4F                    - dec edi //DEC Hornet AMMO
       hl.dll+35227 - 4F                    - dec edi //DEC Nades
       hl.dll+7036F - 49                    - dec ecx //DEC Satchel
       hl.dll+86101 - 49                    - dec ecx //DEC Mines
       hl.dll+7BD92 - 49                    - dec ecx //DEC Snarks
       hl.dll+4BA42 - 4F                    - dec edi //DEC SMG Launcher
       hl.dll+2FF31 - 83 C1 FE              - add ecx,-02//DEC Gauss
       hl.dll+30065 - 49                    - dec ecx //DEC Gauss
       hl.dll+301B4 - 49                    - dec ecx //DEC Gauss
       hl.dll+63128 - 74 08                 - je hl.dll+63132 //inf firerate
       hl.dll+3C59C - 49                    - dec ecx //Hornet gun rechtsklick
       hl.dll+4BB43 - D8 05 A035A20A        - fadd dword ptr [hl.dll+A35A0]//smgnade
       client.dll+1BF66 - 89 97 90000000        - mov [edi+00000090],edx//smgnade


}


uses
  Classes, SysUtils, FileUtil, Forms, Controls, Graphics, Dialogs, ComCtrls,
  StdCtrls, ExtCtrls, jwatlhelp32, Windows;

type

  { TForm1 }

  TForm1 = class(TForm)
    ButtonReInit: TButton;
    CheckBoxProperRapidfire: TCheckBox;
    CheckBoxInfAmmo: TCheckBox;
    CheckBoxRapidfire: TCheckBox;
    CheckBoxAutobhop: TCheckBox;
    CheckBoxEnableAPRegen: TCheckBox;
    CheckBoxEnableHPRegen: TCheckBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    LabelRapidfireRefresh: TLabel;
    LabelAPRate: TLabel;
    LabelMaxHP: TLabel;
    LabelMaxAP: TLabel;
    Label5: TLabel;
    LabelHPRate: TLabel;
    TimerGetRapidFireAddress: TTimer;
    TimerRapidfire: TTimer;
    TimerBhop: TTimer;
    TimerRegen: TTimer;
    TrackBarRapidfireRefresh: TTrackBar;
    TrackBarAPRate: TTrackBar;
    TrackBarMaxHP: TTrackBar;
    TrackBarMaxAP: TTrackBar;
    TrackBarHPRate: TTrackBar;
    procedure ButtonReInitClick(Sender: TObject);
    procedure CheckBoxAutobhopChange(Sender: TObject);
    procedure CheckBoxInfAmmoChange(Sender: TObject);
    procedure CheckBoxProperRapidfireChange(Sender: TObject);
    procedure CheckBoxRapidfireChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure TimerBhopTimer(Sender: TObject);
    procedure TimerGetRapidFireAddressTimer(Sender: TObject);
    procedure TimerRapidfireTimer(Sender: TObject);
    procedure TimerRegenTimer(Sender: TObject);
    procedure TrackBarAPRateChange(Sender: TObject);
    procedure TrackBarHPRateChange(Sender: TObject);
    procedure TrackBarMaxAPChange(Sender: TObject);
    procedure TrackBarMaxHPChange(Sender: TObject);
    procedure TrackBarRapidfireRefreshChange(Sender: TObject);
  private
    { private declarations }
  public
    { public declarations }
  end;


  //AU3_API void WINAPI AU3_Send(LPCWSTR szSendText, int nMode = 0);



  TLocalPlayer = record
    dwAddHP: DWORD;
    dwAddAP: DWORD;
    dwAddMidair: DWORD;
    dwAddRapidfire: DWORD;
    fHP: single;
    fAP: single;
    fMaxHP: single;
    fMaxAP: single;
    fHPRate: single;
    fAPRate: single;
    fMidair: single;
    fRapidfire: single;
  end;

var
  Form1: TForm1;
  hProcess: HANDLE;
  dwProcessId: DWORD;
  Brendan: TLocalPlayer;
  hFenster: HWND;
  ReIniter: boolean = False;
  dwHWBase: DWORD;
  dwHLBase: DWORD;
  dwCLIENTBase: DWORD;




implementation

{$R *.lfm}

//AU3_API void WINAPI AU3_Send(LPCWSTR szSendText, int nMode = 0);
function AU3_Send(szSendText: LPCWSTR; nMode: int32 = 0): integer;
  stdcall; external 'AutoItX3.dll';

function GetModuleBaseAddress(hProcID: cardinal; lpModName: PChar): Pointer;
var
  hSnap: cardinal;
  tm: TModuleEntry32;
begin
  //result := 0;
  hSnap := CreateToolHelp32Snapshot(TH32CS_SNAPMODULE, hProcID);
  if hSnap <> 0 then
  begin
    tm.dwSize := sizeof(TModuleEntry32);
    if Module32First(hSnap, tm) = True then
    begin
      while Module32Next(hSnap, tm) = True do
      begin
        if lstrcmpi(tm.szModule, lpModName) = 0 then
        begin
          Result := Pointer(tm.modBaseAddr);
          break;
        end;
      end;
    end;
    CloseHandle(hSnap);
  end;
end;

procedure WriteFloat(Value: single; Address: DWORD);
begin
  WriteProcessMemory(hProcess, Pointer(Address), @Value, sizeof(Value), nil);
end;

procedure WriteByte(Value: byte; Address: DWORD);
begin
  WriteProcessMemory(hProcess, Pointer(Address), @Value, sizeof(Value), nil);
end;

function ReadFloat(Address: DWORD): single;
begin
  ReadProcessMemory(hProcess, Pointer(Address), @Result, sizeof(Result), nil);
end;

function ReadDword(Address: DWORD): DWORD;
begin
  ReadProcessMemory(hProcess, Pointer(Address), @Result, sizeof(Result), nil);
end;



function GetRapidFireAddress(ModBase: DWORD): DWORD;
var
  temp: DWORD = 0;
begin
  temp := 0;
  temp := ReadDword(ModBase + $A20A4C) + $EC;
  temp := ReadDword(temp) + $78;
  temp := ReadDword(temp) + $6A8;
  temp := ReadDword(temp) + $4C8;
  Result := ReadDword(temp) + $8C;
end;


 function GetProcId(ProcName:PChar):DWORD;
 var pe32:PROCESSENTRY32;
     hSnapshot:HANDLE=0;
 begin
      pe32.dwSize:= sizeof(PROCESSENTRY32);
      hSnapshot:= CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS,0);

      if(Process32First(hSnapshot,pe32)) then
      begin
          repeat
               if lstrcmpi(pe32.szExeFile,ProcName) = 0 then Break;
          until  not (Process32Next( hSnapshot, &pe32 ))  ;
      end;

      if(hSnapshot <> INVALID_HANDLE_VALUE) then CloseHandle(hSnapshot);

     Result:= pe32.th32ProcessID;
 end;




{ TForm1 }

procedure TForm1.FormCreate(Sender: TObject);// ENTRYYYYYYYYY
var
  ModBase: DWORD;
  GameFound: boolean = False;
  temp: DWORD;
begin
  //Initialization
  LabelMaxHP.Caption := IntToStr(TrackBarMaxHP.Position - 1);
  LabelMaxAP.Caption := IntToStr(TrackBarMaxAP.Position - 1);
  LabelHPRate.Caption := floatToStr(TrackBarHPRate.Position / 10);
  LabelAPRate.Caption := floatToStr(TrackBarAPRate.Position / 10);
  Brendan.fHPRate := TrackBarHPRate.Position / 1000;
  Brendan.fAPRate := TrackBarAPRate.Position / 1000;















  //Fenster Handle , ProcessId, OpenProcess-Handle..
  hProcess := 0;
  while hProcess = 0 do
  begin
    //hFenster := FindWindow(nil, 'Half-Life');
    //GetWindowThreadProcessId(hFenster, @dwProcessId);
    dwProcessId:= GetProcId('hl.exe');
    hProcess := OpenProcess(PROCESS_ALL_ACCESS, False, dwProcessId);
    if (hProcess = $0000) and (GameFound = False) then
    begin
      ShowMessage('Waiting for game...');
      GameFound := True;
    end;
    Sleep(100);
  end;

  //===HP and AP Addresses===
  ModBase := DWORD(GetModuleBaseAddress(dwProcessId, 'hw.dll'));
  ReadProcessMemory(hProcess, Pointer(ModBase + $840860), @Brendan.dwAddHP,
    sizeof(Brendan.dwAddHP), nil);
  Brendan.dwAddHP := Brendan.dwAddHP + $504;
  Brendan.dwAddAP := Brendan.dwAddHP + $5C;


  //===Bhop midair check===
  //"hw.dll"+007E6478// Midair Value
  temp := ReadDword(ModBase + $7E6478) + $6BC;
  temp := ReadDword(temp) + $274;
  temp := ReadDword(temp) + $7e4;
  temp := ReadDword(temp) + $3a0;
  //Brendan.dwAddMidair := ReadDword(temp) + $5c;
  Brendan.dwAddMidair := $18D424;

  //===Rapid fire===
  Brendan.dwAddRapidfire := GetRapidFireAddress(ModBase);
  {
  temp := 0;
  temp := ReadDword(ModBase + $A20A4C) + $EC;
  temp := ReadDword(temp) + $78;
  temp := ReadDword(temp) + $6A8;
  temp := ReadDword(temp) + $4C8;
  Brendan.dwAddRapidfire := ReadDword(temp) + $8C;
  }

  //unn√∂tig aber gerade kb das besser zu machen
  dwHWBase := ModBase;


  //Infammo in HL.dll
  dwHLBase := DWORD(GetModuleBaseAddress(dwProcessId, 'hl.dll'));
  dwCLIENTBase := DWORD(GetModuleBaseAddress(dwProcessId, 'client.dll'));

  if ReIniter then
  begin
    ShowMessage('Done.');
  end;

end;



procedure TForm1.CheckBoxAutobhopChange(Sender: TObject);
begin
  //Bhop ein-/ausschalten
  if CheckBoxAutobhop.Checked then
    TimerBhop.Enabled := True
  else
    TimerBhop.Enabled := False;
end;

procedure TForm1.CheckBoxInfAmmoChange(Sender: TObject);
begin
  if CheckBoxInfAmmo.Checked then
  begin
    //NOPping dec opcode (or sub for the egon)
    WriteByte($90, dwHLBase + $6D393); //357
    WriteByte($90, dwHLBase + $3A576); //Pistol
    WriteByte($90, dwHLBase + $4B7F0); //SMG
    WriteByte($90, dwHLBase + $76027); //Shotgun
    WriteByte($90, dwHLBase + $1DEFA); //Crossbow
    WriteByte($90, dwHLBase + $6F51A); //Rockets
    WriteByte($90, dwHLBase + $25D7A); //Egon 1
    WriteByte($90, dwHLBase + $25D7B); //Egon 2
    // hl.dll+3C59C - 49                    - dec ecx //Hornet gun rechtsklick
    WriteByte($90, dwHLBase + $3BC93); //Hornet 2
    WriteByte($90, dwHLBase + $3C59C); //Hornet rechtsklick
    WriteByte($90, dwHLBase + $35227); //Nades
    WriteByte($90, dwHLBase + $7036F); //Satchel
    WriteByte($90, dwHLBase + $86101); //Mines
    WriteByte($90, dwHLBase + $7BD92); //Snarks
    WriteByte($90, dwHLBase + $4BA42); //SMG Launcher
    WriteByte($90, dwHLBase + $2FF31); //Gauss
    WriteByte($90, dwHLBase + $2FF32); //Gauss
    WriteByte($90, dwHLBase + $2FF33); //Gauss
    WriteByte($90, dwHLBase + $30065); //Gauss
    WriteByte($90, dwHLBase + $301B4); //Gauss
  end
  else
  begin
    WriteByte($4A, dwHLBase + $6D393); //357
    WriteByte($48, dwHLBase + $3A576); //Pistol
    WriteByte($4A, dwHLBase + $4B7F0); //SMG
    WriteByte($4A, dwHLBase + $76027); //Shotgun
    WriteByte($48, dwHLBase + $1DEFA); //Crossbow
    WriteByte($49, dwHLBase + $6F51A); //Rockets
    WriteByte($2B, dwHLBase + $25D7A); //Egon 1
    WriteByte($C2, dwHLBase + $25D7B); //Egon 2
    WriteByte($4F, dwHLBase + $3BC93); //Hornet 2
    WriteByte($49, dwHLBase + $3C59C);
    WriteByte($4F, dwHLBase + $35227); //Nades
    WriteByte($49, dwHLBase + $7036F); //Satchel
    WriteByte($49, dwHLBase + $86101); //Mines
    WriteByte($49, dwHLBase + $7BD92); //Snarks
    WriteByte($4F, dwHLBase + $4BA42); //SMG Launcher
    WriteByte($83, dwHLBase + $2FF31); //Gauss
    WriteByte($C1, dwHLBase + $2FF32); //Gauss
    WriteByte($FE, dwHLBase + $2FF33); //Gauss
    WriteByte($49, dwHLBase + $30065); //Gauss
    WriteByte($49, dwHLBase + $301B4); //Gauss
  end;

end;

procedure TForm1.CheckBoxProperRapidfireChange(Sender: TObject);
begin

  if (CheckBoxProperRapidfire.Checked) then
  begin
    //Rapid fire all guns
    WriteByte($90, dwHLBase + $63128);
    WriteByte($90, dwHLBase + $63129);
    //rapid smg nades
    WriteByte($90, dwHLBase + $4BB43);
    WriteByte($90, dwHLBase + $4BB44);
    WriteByte($90, dwHLBase + $4BB45);
    WriteByte($90, dwHLBase + $4BB46);
    WriteByte($90, dwHLBase + $4BB47);
    WriteByte($90, dwHLBase + $4BB48);
    //rapid smg nades
    WriteByte($90, dwCLIENTBase + $1BF66);
    WriteByte($90, dwCLIENTBase + $1BF67);
    WriteByte($90, dwCLIENTBase + $1BF68);
    WriteByte($90, dwCLIENTBase + $1BF69);
    WriteByte($90, dwCLIENTBase + $1BF6A);
    WriteByte($90, dwCLIENTBase + $1BF6B);

  end
  else
  begin
    //hl.dll+4BB43 - D8 05 A035A20A        - fadd dword ptr [hl.dll+A35A0]//smgnade
    //client.dll+1BF66 - 89 97 90000000        - mov [edi+00000090],edx//smgnade
    WriteByte($74, dwHLBase + $63128);
    WriteByte($08, dwHLBase + $63129);

    WriteByte($D8, dwHLBase + $4BB43);
    WriteByte($05, dwHLBase + $4BB44);
    WriteByte($A0, dwHLBase + $4BB45);
    WriteByte($35, dwHLBase + $4BB46);
    WriteByte($A2, dwHLBase + $4BB47);
    WriteByte($0A, dwHLBase + $4BB48);

    WriteByte($89, dwCLIENTBase + $1BF66);
    WriteByte($97, dwCLIENTBase + $1BF67);
    WriteByte($90, dwCLIENTBase + $1BF68);
    WriteByte($00, dwCLIENTBase + $1BF69);
    WriteByte($00, dwCLIENTBase + $1BF6A);
    WriteByte($00, dwCLIENTBase + $1BF6B);
  end;

end;

procedure TForm1.CheckBoxRapidfireChange(Sender: TObject);
begin
  TimerRapidfire.Enabled := CheckBoxRapidfire.Checked;
  TimerGetRapidFireAddress.Enabled := CheckBoxRapidfire.Checked;
end;

procedure TForm1.ButtonReInitClick(Sender: TObject);
begin
  //reinitialisieren
  CheckBoxRapidfire.Checked := False;
  CheckBoxProperRapidfire.Checked := False;
  CheckBoxInfAmmo.Checked := False;
  ReIniter := True;
  FormCreate(nil);
end;




procedure TForm1.TimerBhopTimer(Sender: TObject);
begin
  //Bhop Script
  Brendan.fMidair := ReadFloat(Brendan.dwAddMidair);
  if (GetAsyncKeyState($20) < 0) and (Brendan.fMidair = 0) then
  begin
    ///keybd_event(VK_P, 0, 0, 0);
    //PostMessage(hFenster, WM_KEYDOWN, VK_P, 0);
    AU3_Send('p');
    Sleep(10);
    //PostMessage(hFenster, WM_KEYUP, VK_P, 0);
    //keybd_event(VK_P, 0, KEYEVENTF_KEYUP, 0);
  end;

end;

procedure TForm1.TimerGetRapidFireAddressTimer(Sender: TObject);
begin
  Brendan.dwAddRapidfire := GetRapidFireAddress(dwHWBase);
end;

procedure TForm1.TimerRapidfireTimer(Sender: TObject);
begin
  WriteFloat(-1, Brendan.dwAddRapidfire);
end;

procedure TForm1.TimerRegenTimer(Sender: TObject);
begin
  //Read HP & AP
  Brendan.fHP := ReadFloat(Brendan.dwAddHP);
  Brendan.fAP := ReadFloat(Brendan.dwAddAP);

  // Regenerate HP
  if CheckBoxEnableHPRegen.Checked then
    if (Brendan.fHP + (Brendan.fHPRate) < TrackBarMaxHP.Position) then
    begin
      Brendan.fHP := Brendan.fHP + Brendan.fHPRate;
      WriteFloat(Brendan.fHP, Brendan.dwAddHP);
    end
    else if (Brendan.fHP - (Brendan.fHPRate) > TrackBarMaxHP.Position) then
    begin
      Brendan.fHP := Brendan.fHP - Brendan.fHPRate;
      WriteFloat(Brendan.fHP, Brendan.dwAddHP);
    end;


  //Regenerate AP
  if CheckBoxEnableAPRegen.Checked then
    if (Brendan.fAP + (Brendan.fAPRate) < TrackBarMaxAP.Position) then
    begin
      Brendan.fAP := Brendan.fAP + Brendan.fAPRate;
      WriteFloat(Brendan.fAP, Brendan.dwAddAP);
    end
    else if (Brendan.fAP - (Brendan.fAPRate) > TrackBarMaxAP.Position) then
    begin
      Brendan.fAP := Brendan.fAP - Brendan.fAPRate;
      WriteFloat(Brendan.fAP, Brendan.dwAddAP);
    end;
end;

procedure TForm1.TrackBarAPRateChange(Sender: TObject);
begin
  LabelAPRate.Caption := floatToStr((TrackBarAPRate.Position - 1) / 10);
  Brendan.fAPRate := TrackBarAPRate.Position / 1000;
end;

procedure TForm1.TrackBarHPRateChange(Sender: TObject);
begin
  LabelHPRate.Caption := floatToStr((TrackBarHPRate.Position - 1) / 10);
  Brendan.fHPRate := TrackBarHPRate.Position / 1000;
end;

procedure TForm1.TrackBarMaxAPChange(Sender: TObject);
begin
  Brendan.fMaxAP := TrackBarMaxAP.Position;
  LabelMaxAP.Caption := IntToStr(TrackBarMaxAP.Position - 1);
end;

procedure TForm1.TrackBarMaxHPChange(Sender: TObject);
begin
  Brendan.fMaxHP := TrackBarMaxHP.Position;
  LabelMaxHP.Caption := IntToStr(TrackBarMaxHP.Position - 1);

end;

procedure TForm1.TrackBarRapidfireRefreshChange(Sender: TObject);
begin
  LabelRapidfireRefresh.Caption := IntToStr(TrackBarRapidfireRefresh.Position);
  TimerRapidfire.Interval := TrackBarRapidfireRefresh.Position;
end;



end.
